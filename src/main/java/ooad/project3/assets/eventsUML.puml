@startuml

!theme crt-amber

<style>
header {
  HorizontalAlignment left
}
</style>

class Clerk {}

class Inventory {
  List<Item>
  double getTotalPurchaseValue()
}

package "events" {
  class TheEventBus <<singleton>> {
    EventBus bus // provided by Guava
  }

  abstract class StoreEvent {
    Clerk // stores caller
    // indirectly: this.clerk.store.inventory
  }

  'Publish which clerk has arrived at the store.
  'Publish number of items added to inventory (if any).
  class ArriveAtStoreEvent extends StoreEvent {
  }

  'Publish the amount of money in the register.
  class CheckRegisterEvent extends StoreEvent {
  }

  'Publish the amount of money in the register.
  class GoToBankEvent extends StoreEvent {
    int newAmntInRegister
  }

  'Publish the total number of items.
  'DoInventory: Publish the total purchase price value of inventory items.
  class DoInventoryEvent extends StoreEvent {
    Inventory recentlyDamaged
  }

  'Publish the total number of items ordered.
  class PlaceAnOrderEvent extends StoreEvent {
    Inventory recentlyOrdered
  }

  'Publish the total number of items sold.
  class OpenTheStoreEvent extends StoreEvent {
    Inventory recentlySold
    Inventory recentlyPurchased
  }

  'Publish the total number of items damaged in cleaning.
  class CleanTheStoreEvent extends StoreEvent {
    Inventory recentlyDamaged
  }

  'Publish which clerk has left the store
  class LeaveTheStoreEvent extends StoreEvent {
  }

  ' --- Relationships within Package ---
  Clerk ..> TheEventBus : publishes
  DoInventoryEvent *-- Inventory
  PlaceAnOrderEvent *-- Inventory
  OpenTheStoreEvent *-- Inventory
  CleanTheStoreEvent *-- Inventory

}

'================================================================
' Top-Level Simulation Components
'================================================================
class Logger {
}

' --- Top-Level Relationships ---
Logger <.. TheEventBus : notifies
Clerk ..> StoreEvent : creates

@enduml
