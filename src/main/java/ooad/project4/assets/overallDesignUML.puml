@startuml

!theme crt-amber

<style>
header {
  HorizontalAlignment left
}
</style>

package "model" {

  '================================================================
  ' Item Package: Defines all sellable items and their properties.
  '================================================================
  package "item" {

    ' --- Base Item Definition ---
    abstract class Item <<Builder>> {
      String name
      double purchasePrice
      double listPrice
      boolean newOrUsed
      int dayArrived
      Condition condition
      boolean damage()
    }

    class SoldItem <<decorator>> extends Item {
      - Item base
      double salePrice
      int daySold
    }

    SoldItem o-- Item

  }

  '================================================================
  ' Store Package: Defines the store, staff, and customer logic.
  '================================================================
  package "store" {
    class Store {
      String storeName
      Inventory inventory
      Inventory soldItems
      CashRegister register
      List<Order> orders
      int day
      boolean clothingBan

      sellItem(Item item, double salePrice, int daySold)
      getInventoryValue()
      getReadyOrders()
      getAvailableItemTypes()
      makeRandomItem(Class<? extends BuildableItem> type, int day)
    }

    class Inventory {
      List<Item>
      double getTotalPurchaseValue()
    }

    class Order {
      int arrivalDay;
      List<Item> items;
    }

    class CashRegister {
      double cash
      add(double)
      withdraw(double)
      getCash()
    }

    package "customers" {
      interface Customer {
        Item getPurchaseInterest(List<Item> options)
        boolean acceptPurchase(Item item, double offer)
        Item.Builder getSaleOffer()
        boolean acceptSale(Item item)
      }

      class RandomCustomer implements Customer {
        // buys & sells random items with basic bartering logic
      }

      class CommandLineCustomer implements Customer {
        // requests user input to make decisions
      }
    }

    class Clerk {
      double cleaningDamageChance
      int daysWorkedInARow
      Store
      Tuner
      arriveAtStore()
      checkRegister()
      goToBank()
      doInventory()
      placeAnOrder()
      openTheStore()
      handleBuyingCustomer(Customer)
      handleSellingCustomer(Customer)
      cleanTheStore()
      leaveTheStore()
    }

    package "tuning" {
      interface Tuner {
        void tune(Item)
      }

      class HaphazardTuning implements Tuner {
        void tune(Item)
      }

      class ElectronicTuning implements Tuner {
        void tune(Item)
      }

      class ManualTuning implements Tuner {
        void tune(Item)
      }

    }

    ' --- Relationships within Store Package ---
    Store o-- Order
    Store o-- CashRegister
    Store *-- Inventory
    Store ..> SoldItem : sells items
    Inventory *-- Item
    Clerk o-- Store
    Clerk *-- Tuner : strategy pattern
    Customer <.. Clerk
  }

  '================================================================
  ' Singleton and Factory Definitions
  '================================================================
  class Bank <<singleton>> {
    provideFunds(String accountHolder, double amnt)  // (zero security)
  }

  Bank <.. Clerk

}

package "events" {
  class TheEventBus <<singleton>> {
    EventBus  // provided by Guava
  }

  note top
    EventBus is now by (String) channel
  end note

  abstract class StoreEvent {
    Clerk // stores caller
    // indirectly: this.clerk.store.inventory
  }

  ' --- Relationships within Package ---
  Clerk ..> TheEventBus : publishes
  Clerk ..> StoreEvent : creates

}

'================================================================
' Top-Level Simulation Components
'================================================================
class Logger {
}

class ItemFactory <<factory>> {
  buildRandomItem(Class<? extends BuildableItem>)
}

class CommandHandler {
  List<Clerk> availableClerks
  handleInput(String)
}

class ClerkPool <<object pool>> {
  addClerk(Clerk)
  Clerk assign()  // that Clerk is now unassignable
  makeAssignable(Clerk)
  rest()  // reset unassigned clerk's work streaks
}

class MusicLandSimulator {
  StoreManager northern
  StoreManager southern
  ClerkPool
  -setupStore(Store)
  run() // run sim
  printSummary()
}

class StoreManager {
  Store store
  CommandHandler
  ClerkPool
  run()
  runDailyActions(int day)
  printSummary()
}

' --- Top-Level Relationships ---
StoreManager --> Clerk : commands
StoreManager *-- CommandHandler : defers to
StoreManager --> ClerkPool
MusicLandSimulator *-- StoreManager
MusicLandSimulator *-- ClerkPool
CommandHandler --> Clerk
CommandHandler ..> CommandLineCustomer
Store ..> ItemFactory
ItemFactory ..> item : creates
Logger <.. TheEventBus : notifies

@enduml
