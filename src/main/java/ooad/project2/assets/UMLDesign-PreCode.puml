@startuml

!theme crt-amber

package "model" {

  package "item" {
    enum Condition {
      POOR
      FAIR
      GOOD
      VERY_GOOD
      EXCELLENT
    }

    abstract class Item {
      String name
      double purchasePrice
      double listPrice
      boolean newOrUsed
      int dayArrived
      Condition condition
      double salePrice
      int daySold
      boolean damage()
    }

    abstract class Music extends Item {
      String band
      String album
    }
    class PaperScore extends Music {}
    class CD extends Music {}
    class Vinyl extends Music {}

    abstract class Players extends Item {}
    class CDPlayer extends Players {}
    class RecordPlayer extends Players {}
    class MP3Player extends Players {}

    abstract class Instruments extends Item {}
    abstract class Stringed extends Instruments {
      boolean isElectric
    }
    class Guitar extends Stringed {}
    class Bass extends Stringed {}
    class Mandolin extends Stringed {}

    abstract class Wind extends Instruments {}
    class Flute extends Wind {
      String type
    }
    class Harmonica extends Wind {
      String key
    }

    abstract class Clothing extends Item {}
    class Hat extends Clothing {
      String hatSize
    }
    class Shirt extends Clothing {
      String shirtSize
    }
    class Bandana extends Clothing {}

    abstract class Accessories extends Item {}
    class PracticeAmp extends Accessories {
      int wattage
    }
    class Cable extends Accessories {
      int length
    }
    class Strings extends Accessories {
      String type
    }
  }

  package "store" {
    class Order {
      int arrivalDay;
      List<Item> items;
    }

    class Store {
      List<Item> inventory
      List<Item> soldItems
      CashRegister register
      List<Clerk> staff
      List<Order> orders;
      sellItem(Item item, double salePrice, int daySold)
      getInventoryValue()
    }
    Store o-- Order : has

    class CashRegister {
      double cash
      add(double)
      withdraw(double)
      getCash()
    }

    class Clerk {
      double cleaningDamageChance
      int daysWorkedInARow

      arriveAtStore()
      checkRegister()
      goToBank()
      doInventory()
      placeAnOrder()
      openTheStore()
      cleanTheStore()
      leaveTheStore()
    }

    class Customer {
      String name
      int id
    }
  }

  class Bank <<singleton>> {
    double totalWithdrawn
    getInstance()
    provideFunds(double)
  }

}

class ItemFactory <<factory>> {
  Map<Class<? extends Item>, Supplier<Item.Builder<?>>> builders
  buildRandomItem(Class<? extends Item>)
}

class MusicLandSimulator {
  run()
}

' Relationships
MusicLandSimulator --> Store : manages
Store o-- CashRegister
Store o-- Item : inventory
Store o-- Clerk
Clerk --> Store : works at
Clerk ..> Customer : serves
Clerk ..> Bank : withdraws from
Clerk ..> ItemFactory : gets new items
ItemFactory ..> Item : creates
Item --> Condition : has a

@enduml
